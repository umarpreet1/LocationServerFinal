# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from protos import serve_data_pb2 as serve__data__pb2


class data_serverStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.read = channel.unary_unary(
                '/dataserver.data_server/read',
                request_serializer=serve__data__pb2.read_request.SerializeToString,
                response_deserializer=serve__data__pb2.response_read.FromString,
                )
        self.write = channel.unary_unary(
                '/dataserver.data_server/write',
                request_serializer=serve__data__pb2.write_request.SerializeToString,
                response_deserializer=serve__data__pb2.response.FromString,
                )
        self.update = channel.unary_unary(
                '/dataserver.data_server/update',
                request_serializer=serve__data__pb2.write_request.SerializeToString,
                response_deserializer=serve__data__pb2.response.FromString,
                )
        self.lock = channel.unary_unary(
                '/dataserver.data_server/lock',
                request_serializer=serve__data__pb2.lock_request.SerializeToString,
                response_deserializer=serve__data__pb2.response.FromString,
                )


class data_serverServicer(object):
    """Missing associated documentation comment in .proto file."""

    def read(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def write(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def update(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def lock(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_data_serverServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'read': grpc.unary_unary_rpc_method_handler(
                    servicer.read,
                    request_deserializer=serve__data__pb2.read_request.FromString,
                    response_serializer=serve__data__pb2.response_read.SerializeToString,
            ),
            'write': grpc.unary_unary_rpc_method_handler(
                    servicer.write,
                    request_deserializer=serve__data__pb2.write_request.FromString,
                    response_serializer=serve__data__pb2.response.SerializeToString,
            ),
            'update': grpc.unary_unary_rpc_method_handler(
                    servicer.update,
                    request_deserializer=serve__data__pb2.write_request.FromString,
                    response_serializer=serve__data__pb2.response.SerializeToString,
            ),
            'lock': grpc.unary_unary_rpc_method_handler(
                    servicer.lock,
                    request_deserializer=serve__data__pb2.lock_request.FromString,
                    response_serializer=serve__data__pb2.response.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'dataserver.data_server', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class data_server(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def read(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dataserver.data_server/read',
            serve__data__pb2.read_request.SerializeToString,
            serve__data__pb2.response_read.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def write(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dataserver.data_server/write',
            serve__data__pb2.write_request.SerializeToString,
            serve__data__pb2.response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def update(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dataserver.data_server/update',
            serve__data__pb2.write_request.SerializeToString,
            serve__data__pb2.response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def lock(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dataserver.data_server/lock',
            serve__data__pb2.lock_request.SerializeToString,
            serve__data__pb2.response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
